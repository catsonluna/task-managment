import React, { useEffect, useState } from 'react';
import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/create.module.css'
import Header from '../components/header'
import Cal from '../components/calendar'
import Moment from 'moment';
import axios from 'axios';
import { getCookie } from 'cookies-next';
import { useRouter } from 'next/router';
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";


const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const router = useRouter();
  const [date, setDate] = useState(Moment());
  const [highPriority, setHighPriority] = useState(false);

  useEffect(() => {
    if (!getCookie("token")) {
      router.push("/login");
    }
  }, [])

  const handleSubmit = (event: any) => {
    event.preventDefault();
    console.log(date.valueOf());
    console.log(event.target.title.value);
    console.log(event.target.description.value);

    axios.post("/api/task/add", {
      name: event.target.title.value,
      description: event.target.description.value,
      dueDate: date.valueOf(),
      highPriority: highPriority ? "true" : "false"
    }, {
      headers: {
        "session_token": getCookie("token")
      }
    }).then((res) => {
      router.push('/calendar');

    }
    ).catch((err) => {
      console.log(err);
      switch (err.response.data.cause) {
        case "name_required":
          toast.error("Please fill out the tittle!", {
            position: "top-left",
            autoClose: 5000,
            hideProgressBar: false,
            closeOnClick: true,
            draggable: true,
          });
          break;
          case "description_required":
            toast.error("Please fill out the description!", {
              position: "top-left",
              autoClose: 5000,
              hideProgressBar: false,
              closeOnClick: true,
              draggable: true,
            });
            break
          default:
            toast.error("Something went wrong!", {
              position: "top-left",
              autoClose: 5000,
              hideProgressBar: false,
              closeOnClick: true,
              draggable: true,
            });
      }
    }
    )
};

  return (
    <>
      <Head>
        <title>Make tasks</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main}`}>
        <Header />
        <ToastContainer />
        <div className={styles.description}>
            <form className={`${styles.form}`} onSubmit={handleSubmit} onError={() => {
              console.log("error");
            }}>
              <div className={`${styles.row}`}>
                <div className={`${styles.formatting}`}>{/*viss parejais*/}
                    <label className={`${styles.label}`}>
                      Title
                      <input type="text" className={`${styles.input}`} name={"title"}/>
                    </label>
                    <label className={`${styles.labelA}`}>
                      Description
                      <textarea className={`${styles.inputA}`} name={"description"} ></textarea>
                    </label>
                    <div className={`${styles.fix}`}>{/*date*/}
                      <div className={`${styles.calc}`}>
                        <label className={`${styles.labelCal}`}>
                          Date
                          <Cal onChangeDate={(e) => {
                            setDate(e);
                          }} />
                        </label>
                      </div>
                    </div>
                </div>
              </div>
              <div className={`${styles.sas}`}>
                <div className={`${styles.fixed}`}>
                  <h1 className={`${styles.high}`}>High priority</h1>
                  <label className={`${styles.toggle}`}>
                    <input type="checkbox" className={`${styles.check}`} onChange={(e) => {
                      setHighPriority(e.target.checked);
                    }} />
                    <span className={`${styles.slider}`}></span>
                  </label>
                </div>
                <button type="submit" className={`${styles.button}`}>Submit</button>
              </div>
            </form>
        </div>
      </main>
    </>
  )
}

